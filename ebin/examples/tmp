<erl>

	-include("graphs.hrl").	
	
	-record(upload, {
		  fd,
		  filename,
		  last,
		  gid}).

	-define(DIR, "/tmp/YawsTestUploads/").


	out(A) when A#arg.state == undefined ->
	    State = #upload{},
	    multipart(A, State);
	out(A) ->
	    multipart(A, A#arg.state).



	err() ->
	    {ehtml,
	     {p, [], "error"}}.

	multipart(A, State) ->
	    Parse = yaws_api:parse_multipart_post(A),
	    case Parse of
		{cont, Cont, Res} ->
		    case addFileChunk(A, Res, State) of
		        {done, Result} ->
			    mnesia:transaction(fun() ->
							write_nodes(State#upload.gid),
							write_edges(State#upload.gid)
				               end),
		            Result;
		        {cont, NewState} ->
		            {get_more, Cont, NewState}
		    end;
		{result, Res} ->
		    case addFileChunk(A, Res, State#upload{last=true}) of
		        {done, Result} ->
		            Result;
		        {cont, _} ->
		            err()
		    end;
		{error, _Reason} ->
		    err()
	    end.



	addFileChunk(A, [{part_body, Data}|Res], State) ->
	    addFileChunk(A, [{body, Data}|Res], State);

	addFileChunk(_A, [], State) when State#upload.last==true,
		                         State#upload.filename /= undefined,
		                         State#upload.fd /= undefined ->
            
	    file:close(State#upload.fd),
	    %%file:delete([?DIR,State#upload.filename]),
	    Res = {ehtml,
		   {p,[], "File upload done"}},
	    {done, Res};

	addFileChunk(A, [], State) when State#upload.last==true ->
	    {done, err()};

	addFileChunk(_A, [], State) ->
	    {cont, State};

	addFileChunk(A, [{head, {_Name, Opts}}|Res], State ) ->
	    case lists:keysearch("filename", 1, Opts) of
		{value, {_, Fname0}} ->
		    case lists:keysearch("name", 1, Opts) of 
		    	{_, {_, "gnodes"}} ->
				Fname = "gnodes";
			{_, {_, "gedges"}} ->
				Fname = "gedges";
			_ ->
				Fname = "shit",
				io:format("Shit happens...")
		    end,
		    %%Fname = yaws_api:sanitize_file_name(basename(Fname0)),
		    {ok, Cwd} = file:get_cwd(),
		    %% we must not put the file in the
		    %% docroot, it may execute uploade code if the
		    %% file is a .yaws file !!!!!
		    io:format("~p~p~n", [string:concat(Cwd, ?DIR), Fname]),
		    file:make_dir(string:concat(Cwd, ?DIR)),
		    case file:open([string:concat(Cwd, ?DIR), Fname] ,[write]) of
			{ok, Fd} ->
			    io:format("GID: ~p~n", [lists:keysearch("gid", 1, Opts)]),
			    {_, {_, Gid}} = lists:keysearch("gid", 1, Opts), 
			    S2 = State#upload{filename = Fname,
					      fd = Fd,
					      gid = Gid},
			    addFileChunk(A, Res, S2);
			Err ->
			    {done, err()}
		    end;
		false ->
		    addFileChunk(A,Res,State)
	    end;

	addFileChunk(A, [{body, Data}|Res], State)
	  when State#upload.filename /= undefined ->
	    case file:write(State#upload.fd, Data) of
		ok ->
		    addFileChunk(A, Res, State);
		Err ->
		    {done, err()}
	    end.


	basename(FilePath) ->
	    case string:rchr(FilePath, $\\) of
		0 ->
		    %% probably not a DOS name
		    filename:basename(FilePath);
		N ->
		    %% probably a DOS name, remove everything after last \
		    basename(string:substr(FilePath, N+1))
	    end.

	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	%% Functions to parse files and put data into tables %%
	%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
	
	write_nodes(GraphId) ->
		File = "/home/seva/Documents/erlgraphs/src/tmp/YawsTestUploads/gnodes",
		{ok, Bin} = file:read_file(File),
		Status = parse_nodes(Bin, GraphId).
	
	parse_nodes(Bin, GraphId) when is_binary(Bin) ->
		parse_nodes(binary_to_list(Bin), GraphId);
	parse_nodes(Str, GraphId) when is_list(Str) ->
		try
			lists:foldl(fun(Node, Status) ->
						[Id, Name, X, Y] = string:tokens(Node, ";"),
						mnesia:write(#vertecies{id=Id,
								name=Name,
								x=X,
								y=Y}),
						ok
	    			     end, ok, string:tokens(Str, "\n"))
		catch
			_ ->
				no_ok
		end.

	write_edges(GraphId) ->
		File = "/home/seva/Documents/erlgraphs/src/tmp/YawsTestUploads/gedges",
		{ok, Bin} = file:read_file(File),
		Status = parse_graph(Bin).
	
	parse_edges(Bin) when is_binary(Bin) ->
		parse_edges(binary_to_list(Bin));
	parse_edges(Str) when is_list(Str) ->
		try
			lists:foldl(fun(Edge, Status) ->
						[V, U, I] = string:tokens(Edge, ";"),
						Eid = case mnesia:all_keys(edges) of  
							[] ->
								1;
							_ ->
								lists:max(mnesia:all_keys(edges)) + 1
						end,
						mnesia:write(#edges{id=Eid,
								u_id=V,
								v_id=U,
								i=I}),
						ok
	    			     end, ok, string:tokens(Str, "\n"))
		catch
			_ ->
				no_ok
		end.

			
	%% @doc Function that parses graph file into list of look
	%% [{A1, L1, B1}, {A2, L2, B2}, ..., {AN, LN, BN}]
	parse_graph(Bin) when is_binary(Bin) ->
	    parse_graph(binary_to_list(Bin));
	parse_graph(Str) when is_list(Str) ->
	    Values = [X || X <- string:tokens(Str, "\n")],
	    group_vals(Values, []).

	%% @doc Function that parses graph file into sublists
	group_vals([], Acc) ->
	    lists:reverse(Acc);
	group_vals([Value|Rest], Acc) ->
	    [S, L, D] = string:tokens(Value, ";"),
	    group_vals(Rest, [{S, str_to_num(L), D}|Acc]).

	%% @doc Function to convert string to number.
	%% Deals with
	str_to_num(N) ->
	    case string:to_float(N) of
		{error, no_float} -> list_to_integer(N);
		{F, _} -> F
	    end.	
</erl>
